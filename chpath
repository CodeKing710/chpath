#!/bin/bash

version="chpath - v1.0.1"
help=`cat <<-HELP
Usage: chpath <list|add|remove|edit> [paths ...]

Options:
    All options except list will require a reload of the terminal environment. This can be done by the alias 'reload' that the program writes to the bashrc file, or you can run \\\`source ~/.bashrc\\\` to reload the terminal

    list      Lists current paths in a readable format

    add       Adds path(s) to the current path structure (requires reload)

    remove    Removes path(s) from the current path structure (requires reload)

    edit      Edit path(s) in the current path structure (requires reload)
              Every other argument starting from the first argument indicates a path to change
              Following argument indicates what the path is being changed to
              (It is a sed so weird pattern issue may occur)

    reset     Resets the current path structure to the original path

    save      Saves the current path structure as the original
HELP
`

# chpath's Functions and Variables

# Vars
__cwd="$(pwd)"
__tmppre="$(cat "$HOME/.path" | cut -d '+' -f1)"
__tmppost="$(cat "$HOME/.path" | cut -d '+' -f2)"
changed=''
DEV=''

# Funcs
__args() {
  # Process args
  while [[ -n "$1" ]]; do
    # ALL CASE STATEMENT OPTIONS SHOULD END WITH 'return;;' in this function!!
    case "$1" in
      list )
        __list
        return;;
      add )
        shift
        verbose "Args passed to __add(): $@"
        if [[ ! -z "$1" ]]; then
          __add "$@"
        else
          echo "Required argument: PATH"
        fi
        return;;
      remove )
        shift
        verbose "Args passed to __remove(): $@"
        if [[ ! -z "$1" ]]; then
          __remove "$@"
        else
          echo "Required argument: PATH"
        fi
        return;;
      edit )
        shift
        verbose "Args passed to __edit(): $@"
        if [[ ! -z "$1" ]]; then
          __edit "$@"
        else
          echo "Required argument: PATH"
        fi
        return;;
      reset )
        __reset
        return;;
      save )
        __save
        return;;
      help )
        echo "$help"
        return;;
      version | --version )
        echo "$version"
        return;;
      -V | --verbose )
        DEV=true
        verbose " - Verbose output - "
        ;;
      --usage )
        echo "$help" | head -1
        return;;
      * ) # Catch-all
        echo "$help" | head -1
        error "\"$1\" is not an argument!"
        return;;
    esac
  shift; done
}

error() { echo -e '\e[0;1;31m[ERROR]\e[0;0;0m '"${1}" >&2; }
verbose() { [[ -n "$DEV" ]] && echo -e '\e[0;1;95m[VERBOSE]\e[0;0;0m '"${1}"; }
log() { echo -e '\e[0;1;36m[CHPATH]\e[0;0;0m '"${1}"; }
__list() { echo -e "${PATH//:/\\n}"; }
__reset() { cat "$HOME"/.pathog > "$HOME/.path" && log "Path reset!"; }
__save() { cat "$HOME"/.path > "$HOME/.pathog" && log "Path saved!"; }
__add() {
  changed=true
  while [[ -n "$1" ]]; do
    case "$1" in
      -b | --before )
        shift;
        __tmppre="${1}:$__tmppre"
        ;;
      -a | --after )
        shift;
        __tmppost="${__tmppost}:${1}"
        ;;
      * )
        __tmppost="${__tmppost}:${1}"
        ;;
    esac
  shift; done
  verbose "Path file update: ${__tmppre}+${__tmppost}"
}
__remove() {
  changed=true
  while [[ -n "$1" ]]; do
    if [[ "$__tmppre" =~ "$1" ]]; then
      __tmppre="${__tmppre//$1/}" && changed=true
      verbose "Prepath list: Removed '$1' - $__tmppre"
    elif [[ "$__tmppost" =~ "$1" ]]; then
      __tmppost="${__tmppost//$1/}" && changed=true
      verbose "Postpath list: Removed '$1' - $__tmppost"
    else
      error "Failed to remove ${1}! Path doesn't exist in list!"
    fi
    # Catch special empty case
    if [[ "$__tmppre" == ":" ]]; then
      verbose "Empty Prepath list"
      __tmppre="${__tmppre//:/}"
    fi
    if [[ "$__tmppost" == ":" ]]; then
      verbose "Empty Postpath list"
      __tmppost="${__tmppost//:/}"
    fi
  shift; done
}
__edit() {
  while [[ -n "$1" ]]; do
    local og="$1"; shift
    local nu="$1"
    
    verbose "Editing $og to $nu"

    # sed -i "s;$og;$nu;" "$HOME/.path" && changed=true || echo "Failed to edit $og to $nu!"
    if [[ $__tmppre =~ "$og" ]]; then
      __tmppre="${__tmppre//$og/$nu}" && changed=true
      verbose "Prepath list: '$og' is now '$nu' - $__tmppre"
    elif [[ $__tmppost =~ "$og" ]]; then
      __tmppost="${__tmppost//$og/$nu}" && changed=true
      verbose "Postpath list: '$og' is now '$nu' - $__tmppost"
    else
      error "Failed to edit $og to $nu! Path doesn't exist in list!"
    fi
  shift; done
  verbose "Updated path file: $(cat "$HOME/.path")"
}

# chpath's main code

repo="$(find "$HOME" -type d -name chpath 2>/dev/null | head -1)"

if [[ -z "$([[ -e /usr/local/bin ]] && find /usr/local/bin -type f -name chpath)" ]]; then
  [[ $(diff "$repo"/chpath "$HOME"/bin/chpath) ]] && "$repo/install"
else
  [[ $(diff "$repo"/chpath /usr/local/bin/chpath) ]] && "$repo/install" --sys
fi

__chpath() {
  # Run args
  [ -z "$1" ] && __args --usage || __args "$@"

  # Save users original path
  if [ ! -e "$HOME/.pathog" ]; then
    verbose "Creating .pathog"
    echo "+" > "$HOME/.pathog"
  fi

  # Set .path file if it doesn't exist
  if [ ! -e "$HOME/.path" ]; then
    verbose "Creating .path"
    echo "+" > "$HOME/.path"
  fi

  # Arg will set state of __chg to true to update the path file only when needed
  if [[ -n "$changed" ]]; then
    echo -e "${__tmppre}+${__tmppost}" > "$HOME/.path" && verbose "Path file written"
  fi

  # This will work with the program being force sourced
  source "$HOME/.bashrc"
}

__chpath "$@"

# Cleanup for accidental sourcing
unset __chpath __args __cwd repo __tmp DEV
unset version help
